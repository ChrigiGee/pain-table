Lazarusforum wp_xyz siehe http://www.lazarusforum.de/viewtopic.php?f=18&t=9395

So, hier ist eine Vorabversion der TGanttSeries incl kleinem Demo-Projekt. Die Series ist noch nicht registriert, muss also zur Laufzeit erzeugt werden. Das passiert alles im FormCreate. Außerdem erlaubt das Programm, mit den Properties zur Laufzeit herumzuspielen, daher erscheint es umfangreicher als später nötig. 

Was kann das ganze?
- Daten"punkte" (d.h. Gantt Balken) werden durch einen Aufruf der Funktion "AddGantt(AStart, AEnd, ATaskIndex: Double; ATaskName: String; AColor: TColor = clTAColor; ABrushStyle: TBrushStyle = bsSolid): Integer" erzeugt. AStart und AEnd sind Anfang und Ende, ATaskIndex der Index, ATaskName die Beschreibung des Projekt-Schrittes. Optional kann man für diesen Balken die Farbe und das Füllmuster festlegen - wenn nicht, gelten die Werte von BarBrush. Den Rückgabewert der Funktion sollte man sich merken, wenn zu diesem Balken eine Verbindungslinie führen soll. 
- Verbindunglinien zieht man mit "AddLink(AFromIndex, AToIndex: Integer; APenColor: TColor = clTAColor; APenStyle: TPenStyle = psSolid; APenWidth: Integer = 1): Integer". AFromIndex ist der von AddGantt zurückgegebene Index des Balkens, von dem eine Linie ausgeht (rechts), AToIndex derjenige, bei dem die Linie endet (links). Die Linie wird mit rechten Winkeln gezeichnet. Einen Router, der die Linien schön zwischen den Balken hindurchführt, wollte ich nicht schreiben, aber die Lage der Klickpunkte kann man mit den Properties von Links[AIndex] beeinflussen, wobei AIndex der von AddLink zurückgegebene Wert ist (siehe rechtes Einstellungspanel im Demo). Linienart, - farbe und -strichstärke können für jede Linie individuell vergeben werden; wenn nicht, gilt LinkPen.
- Der übliche TAChart-Bimborium sollte funktionieren, z.B. Zuschalten von Series-Beschriftungen, Invertieren der Achsenrichtung, DateTimeIntervalSource, etc.
- Die DataPoint-Tools (DataPointClick und DataPointDrag) kommen mit der Series zurecht und reagieren auf einen Klick innerhalb des Balkens. Mit dem DragTool kannst du z.B. einen Balken verschieben (in dem Programm mit SHIFT+Click); Längenveränderung sollte im Prinzip auch möglich sein, ist aber nicht realisiert.

Zwei Nachteile sollen nicht verschwiegen werden:
- Wegen der speziellen Art, wie TAChart die Daten intern speichert, muss das Diagramm zunächst mit senkrechten Balken aufgebaut werden. Erst nachdem die neue Series in dem Chart eingefügt worden ist, kann man das Diagramm drehen - siehe code dazu in FormCreate.
- Die intern in der Series gespeicherten Task-Beschreibungen werden bei gedrehter Achse nicht angezeigt - ich weiß, wo der Fehler liegt, sehe aber momentan keine Möglichkeit ihn zu beheben. Als Abhilfe kann man eine TListChartSource ins Formular klicken, in diese die Beschriftungen zusammen mit den richtigen Koordinaten kopieren (CopySourceForMarks im Demo) und diese für die Achsenbeschriftung verwenden - das wird im Demo so gemacht.

Der Code setzt ein paar kleine Änderungen von TAChart voraus, du solltest daher zum Testen eine aktuelle Lazarus-Trunk-Version verwenden. Bei älteren Versionen gibt es Compiler-Fehler, die bemängelten Code-Stellen kann man aber auskommentieren, so dass das Programm läuft (Beim Verschieben von Balken muss man dann in Kauf nehmen, dass der Balkenanfang bei der ersten Mausbewegung zur Maus springt).

Wiegesagt, das ist eine Vorabversion. In dieser Version wird die TGanttSeries wahrscheinlich nicht in Lazarus landen; ich suche noch eine Möglichkeit, wie man die Link-Information noch besser in die ChartSource-Infrastruktur integrieren kann, und ob es vielleicht doch einen Weg gibt, das Diagramm mit horizontalen Balken aufzubauen. Das kann aber dauern...